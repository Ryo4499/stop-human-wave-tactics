version: "3.9"
services:
  proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - TZ
      - BASIC_AUTH_USERNAME
      - BASIC_AUTH_PASSWORD
    ports:
      - "80:80"
    tty: true
    volumes:
      - type: bind
        source: "./nginx/conf.d/default.conf"
        target: "/etc/nginx/conf.d/default.conf"
    depends_on:
      - db
      - front
      - back
    restart: unless-stopped
  #    networks:
  #      app_net:
  #        ipv4_address: 172.49.0.2
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    command: "--config.file=/etc/prometheus/protheus.yml"
    restart: always

  grafana:
    image: grafana/grafana
    restart: always

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command: "--config.file=/etc/alertmanager/config.yml"
    restart: always

  db:
    image: postgres:14-alpine
    env_file:
      - ./.env
    environment:
      - TZ
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    tty: true
    volumes:
      - "dbData:/var/lib/postgresql/data"
    restart: unless-stopped
  #    networks:
  #      db_net:
  #        ipv4_address: 172.23.0.2

  back:
    build:
      context: ./stop-human-wave-tactics-backend
      dockerfile: Dockerfile
      args:
        UID: $UID
        GID: $GID
        USER: $USER
        GROUP: $GROUP
        MODE: $MODE
    env_file:
      - ./.env
      - ./stop-human-wave-tactics-backend/.env
    environment:
      - TZ
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - DB_SSL
    user: "${UID}:${GID}"
    working_dir: "/home/${USER}/stop-human-wave-tactics-backend"
    volumes:
      - "backModules:/home/${USER}/stop-human-wave-tactics-backend/node_modules"
      - type: bind
        source: "./stop-human-wave-tactics-backend"
        target: "/home/${USER}/stop-human-wave-tactics-backend"
    tty: true
    entrypoint: sh
    command:
      - -c
      - |
        if [ "${MODE}" = "PRODUCTION" ]; then \
          yarn build && yarn start; \
        else \
          yarn build && yarn dev; \
        fi
    depends_on:
      - db
    restart: unless-stopped
  #    networks:
  #      app_net:
  #        ipv4_address: 172.49.0.4
  #      db_net:
  #        ipv4_address: 172.23.0.3

  front:
    build:
      context: ./stop-human-wave-tactics-frontend
      dockerfile: Dockerfile
      args:
        UID: $UID
        GID: $GID
        USER: $USER
        GROUP: $GROUP
        MODE: $MODE
    env_file:
      - ./.env
      - ./stop-human-wave-tactics-frontend/.env
    environment:
      - TZ
    user: "${UID}:${GID}"
    working_dir: "/home/${USER}/stop-human-wave-tactics-frontend"
    volumes:
      - "frontModules:/home/${USER}/stop-human-wave-tactics-frontend/node_modules"
      - type: bind
        source: "./stop-human-wave-tactics-frontend"
        target: "/home/${USER}/stop-human-wave-tactics-frontend"
    tty: true
    entrypoint: sh
    #command:
    #  - -c
    #  - |
    #    if [ "${MODE}" = "PRODUCTION" ]; then \
    #      yarn build && yarn start; \
    #    else \
    #      yarn build && yarn dev; \
    #    fi
    depends_on:
      - back
      - db
    restart: unless-stopped
#    networks:
#      app_net:
#        ipv4_address: 172.49.0.3

volumes:
  dbData:
  frontModules:
  backModules:
#networks:
#  app_net:
#    driver: bridge
#    ipam:
#      driver: default
#      config:
#        - subnet: 172.49.0.0/24
#  db_net:
#    driver: bridge
#    ipam:
#      driver: default
#      config:
#        - subnet: 172.23.0.0/24
