version: "3.9"
services:
  proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - TZ
      - BASIC_AUTH_USERNAME
      - BASIC_AUTH_PASSWORD
      - DOCKER_CONTENT_TRUST
    ports:
      - "80:80"
    tty: true
    volumes:
      - type: bind
        source: "./nginx/conf.d/default.conf"
        target: "/etc/nginx/conf.d/default.conf"
    depends_on:
      - db
      - front
      - back
    restart: unless-stopped
    networks:
      app_net:
        ipv4_address: 172.30.0.4

  prometheus:
    image: prom/prometheus:latest
    env_file:
      - ./.env
    volumes:
      - ./prometheus:/etc/prometheus
    environment:
      - DOCKER_CONTENT_TRUST
    command: "--config.file=/etc/prometheus/prometheus.yml"
    restart: always
    networks:
      monitor_net:
        ipv4_address: 172.30.4.5

  exporter:
    image: prom/node-exporter:latest
    env_file:
      - ./.env
    environment:
      - DOCKER_CONTENT_TRUST
    restart: always
    networks:
      monitor_net:
        ipv4_address: 172.30.4.4

  grafana:
    image: grafana/grafana:latest
    env_file:
      - ./.env
    environment:
      - DOCKER_CONTENT_TRUST
    restart: always
    networks:
      monitor_net:
        ipv4_address: 172.30.4.3

  alertmanager:
    image: prom/alertmanager:latest
    env_file:
      - ./.env
    environment:
      - DOCKER_CONTENT_TRUST
    volumes:
      - ./alertmanager:/etc/alertmanager
    command: "--config.file=/etc/alertmanager/config.yml"
    restart: always
    networks:
      monitor_net:
        ipv4_address: 172.30.4.2

  db:
    image: postgres:14-alpine
    env_file:
      - ./.env
    environment:
      - TZ
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - DOCKER_CONTENT_TRUST
    tty: true
    volumes:
      - type: volume
        source: dbData
        target: /var/lib/postgresql/data
    restart: unless-stopped
    networks:
      db_net:
        ipv4_address: 172.30.3.2

  back:
    build:
      context: ./stop-human-wave-tactics-backend
      dockerfile: Dockerfile
      args:
        MY_USER: $MY_USER
        MY_GROUP: $MY_GROUP
        MODE: $MODE
    env_file:
      - ./.env
      - ./stop-human-wave-tactics-backend/.env
    environment:
      - TZ
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - DB_SSL
      - DOCKER_CONTENT_TRUST
    working_dir: "/home/${MY_USER}/stop-human-wave-tactics-backend"
    user: $MY_USER
    volumes:
      - type: volume
        source: backModules
        target: /home/${MY_USER}/stop-human-wave-tactics-backend/node_modules
      - type: bind
        source: "./stop-human-wave-tactics-backend"
        target: "/home/${MY_USER}/stop-human-wave-tactics-backend"
    tty: true
    entrypoint: sh
    command:
      - -c
      - |
        chown -R $MY_USER:$MY_GROUP ./ ; \
        if [ "${MODE}" = "PRODUCTION" ]; then \
          yarn build && yarn start; \
        else \
          yarn dev; \
        fi
    depends_on:
      - db
    restart: unless-stopped
    networks:
      app_net:
        ipv4_address: 172.30.0.3
      db_net:
        ipv4_address: 172.30.3.3

  front:
    build:
      context: ./stop-human-wave-tactics-frontend
      dockerfile: Dockerfile
      args:
        MY_USER: $MY_USER
        MY_GROUP: $MY_GROUP
        MODE: $MODE
    env_file:
      - ./.env
      - ./stop-human-wave-tactics-frontend/.env
    environment:
      - TZ
      - DOCKER_CONTENT_TRUST
    working_dir: "/home/${MY_USER}/stop-human-wave-tactics-frontend"
    user: $MY_USER
    volumes:
      - type: volume
        source: frontModules
        target: /home/${MY_USER}/stop-human-wave-tactics-frontend/node_modules
      - type: bind
        source: "./stop-human-wave-tactics-frontend"
        target: "/home/${MY_USER}/stop-human-wave-tactics-frontend"
    tty: true
    entrypoint: sh
    command:
      - -c
      - |
        chown -R $MY_USER:$MY_GROUP ./ ; \
        if [ "${MODE}" = "PRODUCTION" ]; then \
          yarn build && yarn start; \
        else \
          yarn dev; \
        fi
    depends_on:
      - back
      - db
    restart: unless-stopped
    networks:
      app_net:
        ipv4_address: 172.30.0.2

volumes:
  dbData:
  frontModules:
  backModules:
networks:
  default:
    external: false
  app_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/24
  db_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.3.0/24
  monitor_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.4.0/24
